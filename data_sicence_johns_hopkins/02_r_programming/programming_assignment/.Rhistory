}
} else {
oldwarn <- getOption("warn")
options(warn = -1)
pneumonia <- as.numeric(outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
options(warn = oldwarn)
menor <- min(
pneumonia[outcome$State == state], na.rm = TRUE)
hospitais <- outcome$Hospital.Name[
! is.na(pneumonia)
& pneumonia == menor
& outcome$State == state]
n <- length(hospitais)
if (n == 1) {
return(hospitais)
} else {
return(sort(hospitais)[1])
}
}
}
rankhospital('MD', 'heart attack', 'worst')
rankhospital <- function(state, desfecho, ranking) {
# checagens prévias:
estados <- unique(outcome$State)
if (!(desfecho %in% c("heart attack", "heart failure", "pneumonia"))) {
stop('invalid outcome')
} else if (!(state %in% estados)) {
stop('invalid state')
}
if (desfecho == "heart attack") {
oldwarn <- getOption("warn")
options(warn = -1)
df <- outcome
#df$heart.attack <- as.numeric(df$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
df$heart.attack <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
options(warn = oldwarn)
df2 <- subset(df, State == state & ! is.na(heart.attack))
colnames(df2)
df3 <- df2[with(df2, order(heart.attack, Hospital.Name)), ]
return(df3[, c("State", "Hospital.Name", "heart.attack")])
rankingOK <- if (ranking == "best") {
1
} else if (ranking == "worst") {
nrow(df3)
} else {
ranking
}
if (nrow(df3) < rankingOK) {
return(NA)
} else {
hospital <- df3$Hospital.Name[rankingOK]
return(hospital)
}
} else if (desfecho == "heart failure") {
oldwarn <- getOption("warn")
options(warn = -1)
heart.failure <- as.numeric(outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
options(warn = oldwarn)
menor <- min(
heart.failure[outcome$State == state], na.rm = TRUE)
hospitais <- outcome$Hospital.Name[
! is.na(heart.failure)
& heart.failure == menor
& outcome$State == state]
n <- length(hospitais)
if (n == 1) {
return(hospitais)
} else {
return(sort(hospitais)[1])
}
} else {
oldwarn <- getOption("warn")
options(warn = -1)
pneumonia <- as.numeric(outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
options(warn = oldwarn)
menor <- min(
pneumonia[outcome$State == state], na.rm = TRUE)
hospitais <- outcome$Hospital.Name[
! is.na(pneumonia)
& pneumonia == menor
& outcome$State == state]
n <- length(hospitais)
if (n == 1) {
return(hospitais)
} else {
return(sort(hospitais)[1])
}
}
}
rankhospital('MD', 'heart attack', 'worst')
rankhospital <- function(state, desfecho, ranking) {
# checagens prévias:
estados <- unique(outcome$State)
if (!(desfecho %in% c("heart attack", "heart failure", "pneumonia"))) {
stop('invalid outcome')
} else if (!(state %in% estados)) {
stop('invalid state')
}
if (desfecho == "heart attack") {
oldwarn <- getOption("warn")
options(warn = -1)
df <- outcome
#df$heart.attack <- as.numeric(df$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
df$heart.attack <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
options(warn = oldwarn)
df2 <- subset(df, State == state & ! is.na(heart.attack))
colnames(df2)
df3 <- df2[with(df2, order(heart.attack, Hospital.Name)), ]
#return(df3[, c("State", "Hospital.Name", "heart.attack")])
rankingOK <- if (ranking == "best") {
1
} else if (ranking == "worst") {
nrow(df3)
} else {
ranking
}
if (nrow(df3) < rankingOK) {
return(NA)
} else {
hospital <- df3$Hospital.Name[rankingOK]
return(hospital)
}
} else if (desfecho == "heart failure") {
oldwarn <- getOption("warn")
options(warn = -1)
heart.failure <- as.numeric(outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
options(warn = oldwarn)
menor <- min(
heart.failure[outcome$State == state], na.rm = TRUE)
hospitais <- outcome$Hospital.Name[
! is.na(heart.failure)
& heart.failure == menor
& outcome$State == state]
n <- length(hospitais)
if (n == 1) {
return(hospitais)
} else {
return(sort(hospitais)[1])
}
} else {
oldwarn <- getOption("warn")
options(warn = -1)
pneumonia <- as.numeric(outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
options(warn = oldwarn)
menor <- min(
pneumonia[outcome$State == state], na.rm = TRUE)
hospitais <- outcome$Hospital.Name[
! is.na(pneumonia)
& pneumonia == menor
& outcome$State == state]
n <- length(hospitais)
if (n == 1) {
return(hospitais)
} else {
return(sort(hospitais)[1])
}
}
}
rankhospital('MD', 'heart attack', 'worst')
rm(list=ls())
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
rankhospital <- function(state, desfecho, ranking) {
# checagens prévias:
estados <- unique(outcome$State)
if (!(desfecho %in% c("heart attack", "heart failure", "pneumonia"))) {
stop('invalid outcome')
} else if (!(state %in% estados)) {
stop('invalid state')
}
if (desfecho == "heart attack") {
oldwarn <- getOption("warn")
options(warn = -1)
df <- outcome
#df$heart.attack <- as.numeric(df$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
df$heart.attack <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
options(warn = oldwarn)
df2 <- subset(df, State == state & ! is.na(heart.attack))
colnames(df2)
df3 <- df2[with(df2, order(heart.attack, Hospital.Name)), ]
#return(df3[, c("State", "Hospital.Name", "heart.attack")])
rankingOK <- if (ranking == "best") {
1
} else if (ranking == "worst") {
nrow(df3)
} else {
ranking
}
if (nrow(df3) < rankingOK) {
return(NA)
} else {
hospital <- df3$Hospital.Name[rankingOK]
return(hospital)
}
} else if (desfecho == "heart failure") {
oldwarn <- getOption("warn")
options(warn = -1)
df <- outcome
#df$heart.attack <- as.numeric(df$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
df$heart.failure <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
options(warn = oldwarn)
df2 <- subset(df, State == state & ! is.na(heart.failure))
colnames(df2)
df3 <- df2[with(df2, order(heart.failure, Hospital.Name)), ]
#return(df3[, c("State", "Hospital.Name", "heart.attack")])
rankingOK <- if (ranking == "best") {
1
} else if (ranking == "worst") {
nrow(df3)
} else {
ranking
}
if (nrow(df3) < rankingOK) {
return(NA)
} else {
hospital <- df3$Hospital.Name[rankingOK]
return(hospital)
}
} else {
oldwarn <- getOption("warn")
options(warn = -1)
df <- outcome
#df$heart.attack <- as.numeric(df$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
df$pneumonia <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
options(warn = oldwarn)
df2 <- subset(df, State == state & ! is.na(pneumonia))
colnames(df2)
df3 <- df2[with(df2, order(pneumonia, Hospital.Name)), ]
#return(df3[, c("State", "Hospital.Name", "heart.attack")])
rankingOK <- if (ranking == "best") {
1
} else if (ranking == "worst") {
nrow(df3)
} else {
ranking
}
if (nrow(df3) < rankingOK) {
return(NA)
} else {
hospital <- df3$Hospital.Name[rankingOK]
return(hospital)
}
}
}
rankhospital('TX', 'heart failure', 4)
rankhospital('TX', 'heart failure', 'best')
rankhospital('TX', 'heart attack', 4)
rankhospital('MN', 'heart attack', 4)
rankhospital('MN', 'heart attack', 5000)
rm(list=ls())
setwd("~/repositoriosGit/coursera/data_sicence_johns_hopkins/02_r_programming/programming_assignment")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
rm(list=ls())
rankall <- function(outcome, num = "best") {
## Read outcome data: COLS: HospitalName, State, HeartAttack, HearFailure, Pneumonia
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")[,c(2,7,11,17,23)]
## Check that state and outcome are valid
if(! (outcome == "heart attack" || outcome == "heart failure" || outcome == "pneumonia") ) {
stop("invalid outcome")
}
if(class(num) == "character"){
if (! (num == "best" || num == "worst")){
stop("invalid number")
}
}
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the (abbreviated) state name
# Remove columns by outcome, only left HospitalName and Deaths by outcome
if(outcome == "heart attack") {
data = data[,c(1,2,3)]
} else if(outcome == "heart failure") {
data = data[,c(1,2,4)]
} else if(outcome == "pneumonia") {
data = data[,c(1,2,5)]
}
names(data)[3] = "Deaths"
data[, 3] = suppressWarnings( as.numeric(data[, 3]) )
# Remove rows with NA
data = data[!is.na(data$Deaths),]
splited = split(data, data$State)
ans = lapply(splited, function(x, num) {
# Order by Deaths and then HospitalName
x = x[order(x$Deaths, x$Hospital.Name),]
# Return
if(class(num) == "character") {
if(num == "best") {
return (x$Hospital.Name[1])
}
else if(num == "worst") {
return (x$Hospital.Name[nrow(x)])
}
}
else {
return (x$Hospital.Name[num])
}
}, num)
#Return data.frame with format
return ( data.frame(hospital=unlist(ans), state=names(ans)) )
}
head(rankall('heart attack', 20), 10)
tail(rankall('pneumonia', 'worst'), 3)
rm(list=ls())
setwd("~/repositoriosGit/coursera/data_sicence_johns_hopkins/02_r_programming/programming_assignment")
rm(list=ls())
best <- function(state, desfecho) {
# checagens prévias:
estados <- unique(outcome$State)
if (!(desfecho %in% c("heart attack", "heart failure", "pneumonia"))) {
stop('invalid outcome')
} else if (!(state %in% estados)) {
stop('invalid state')
}
if (desfecho == "heart attack") {
oldwarn <- getOption("warn")
options(warn = -1)
heart.attack <- as.numeric(outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
options(warn = oldwarn)
menor <- min(heart.attack[outcome$State == state], na.rm = TRUE)
hospitais <- outcome$Hospital.Name[
! is.na(heart.attack)
& heart.attack == menor
& outcome$State == state]
n <- length(hospitais)
if (n == 1) {
return(hospitais)
} else {
return(sort(hospitais)[1])
}
} else if (desfecho == "heart failure") {
oldwarn <- getOption("warn")
options(warn = -1)
heart.failure <- as.numeric(outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
options(warn = oldwarn)
menor <- min(
heart.failure[outcome$State == state], na.rm = TRUE)
hospitais <- outcome$Hospital.Name[
! is.na(heart.failure)
& heart.failure == menor
& outcome$State == state]
n <- length(hospitais)
if (n == 1) {
return(hospitais)
} else {
return(sort(hospitais)[1])
}
} else {
oldwarn <- getOption("warn")
options(warn = -1)
pneumonia <- as.numeric(outcome$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
options(warn = oldwarn)
menor <- min(
pneumonia[outcome$State == state], na.rm = TRUE)
hospitais <- outcome$Hospital.Name[
! is.na(pneumonia)
& pneumonia == menor
& outcome$State == state]
n <- length(hospitais)
if (n == 1) {
return(hospitais)
} else {
return(sort(hospitais)[1])
}
}
}
best('SC', 'heart attack')
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
best('SC', 'heart attack')
best("NY", "pneumonia")
best("AK", "pneumonia")
setwd("~/repositoriosGit/coursera/data_sicence_johns_hopkins/02_r_programming/programming_assignment")
rm(list=ls())
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
rankhospital <- function(state, desfecho, ranking) {
# checagens prévias:
estados <- unique(outcome$State)
if (!(desfecho %in% c("heart attack", "heart failure", "pneumonia"))) {
stop('invalid outcome')
} else if (!(state %in% estados)) {
stop('invalid state')
}
if (desfecho == "heart attack") {
oldwarn <- getOption("warn")
options(warn = -1)
df <- outcome
#df$heart.attack <- as.numeric(df$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
df$heart.attack <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
options(warn = oldwarn)
df2 <- subset(df, State == state & ! is.na(heart.attack))
colnames(df2)
df3 <- df2[with(df2, order(heart.attack, Hospital.Name)), ]
#return(df3[, c("State", "Hospital.Name", "heart.attack")])
rankingOK <- if (ranking == "best") {
1
} else if (ranking == "worst") {
nrow(df3)
} else {
ranking
}
if (nrow(df3) < rankingOK) {
return(NA)
} else {
hospital <- df3$Hospital.Name[rankingOK]
return(hospital)
}
} else if (desfecho == "heart failure") {
oldwarn <- getOption("warn")
options(warn = -1)
df <- outcome
#df$heart.attack <- as.numeric(df$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
df$heart.failure <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
options(warn = oldwarn)
df2 <- subset(df, State == state & ! is.na(heart.failure))
colnames(df2)
df3 <- df2[with(df2, order(heart.failure, Hospital.Name)), ]
#return(df3[, c("State", "Hospital.Name", "heart.attack")])
rankingOK <- if (ranking == "best") {
1
} else if (ranking == "worst") {
nrow(df3)
} else {
ranking
}
if (nrow(df3) < rankingOK) {
return(NA)
} else {
hospital <- df3$Hospital.Name[rankingOK]
return(hospital)
}
} else {
oldwarn <- getOption("warn")
options(warn = -1)
df <- outcome
#df$heart.attack <- as.numeric(df$Lower.Mortality.Estimate...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
df$pneumonia <- as.numeric(df$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
options(warn = oldwarn)
df2 <- subset(df, State == state & ! is.na(pneumonia))
colnames(df2)
df3 <- df2[with(df2, order(pneumonia, Hospital.Name)), ]
#return(df3[, c("State", "Hospital.Name", "heart.attack")])
rankingOK <- if (ranking == "best") {
1
} else if (ranking == "worst") {
nrow(df3)
} else {
ranking
}
if (nrow(df3) < rankingOK) {
return(NA)
} else {
hospital <- df3$Hospital.Name[rankingOK]
return(hospital)
}
}
}
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
setwd("~/repositoriosGit/coursera/data_sicence_johns_hopkins/02_r_programming/programming_assignment")
rm(list=ls())
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
rankall <- function(outcome, num = "best") {
## Read outcome data: COLS: HospitalName, State, HeartAttack, HearFailure, Pneumonia
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")[,c(2,7,11,17,23)]
## Check that state and outcome are valid
if(! (outcome == "heart attack" || outcome == "heart failure" || outcome == "pneumonia") ) {
stop("invalid outcome")
}
if(class(num) == "character"){
if (! (num == "best" || num == "worst")){
stop("invalid number")
}
}
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the (abbreviated) state name
# Remove columns by outcome, only left HospitalName and Deaths by outcome
if(outcome == "heart attack") {
data = data[,c(1,2,3)]
} else if(outcome == "heart failure") {
data = data[,c(1,2,4)]
} else if(outcome == "pneumonia") {
data = data[,c(1,2,5)]
}
names(data)[3] = "Deaths"
data[, 3] = suppressWarnings( as.numeric(data[, 3]) )
# Remove rows with NA
data = data[!is.na(data$Deaths),]
splited = split(data, data$State)
ans = lapply(splited, function(x, num) {
# Order by Deaths and then HospitalName
x = x[order(x$Deaths, x$Hospital.Name),]
# Return
if(class(num) == "character") {
if(num == "best") {
return (x$Hospital.Name[1])
}
else if(num == "worst") {
return (x$Hospital.Name[nrow(x)])
}
}
else {
return (x$Hospital.Name[num])
}
}, num)
#Return data.frame with format
return ( data.frame(hospital=unlist(ans), state=names(ans)) )
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
